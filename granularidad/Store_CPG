with
country_cpg_products as(
select 
cpg.name as cpg,
cpg.id as cpg_id,
cpg.country_id,
b.name as brand,
p.id as product_id,
p.name as product_name,
p.package,
p.currency
from catalog_product p 
join catalog_brand b on b.id=p.brand_id and p.currency={{currency}}
join brandcenter_brandcentercpg_brands bcpg on bcpg.brand_id=b.id 
join brandcenter_brandcentercpg cpg on cpg.id=bcpg.brandcentercpg_id and cpg.id in ({{cpg_id}}) 
group by 1,2,3,4,5,6,7
order by 1)
select
to_char(op.updated at time zone sb.timezone,'YYYY-MM') as month,
ccp.country_id,
gc.name as city, 
ccp.cpg,
ccp.brand,
s.name as store,
ccp.product_id,
ccp.product_name,
ccp.package,
count(distinct o.user_id) as users,
count(distinct o.id) as orders,
sum(op.quantity) as units_requested,
sum(op.quantity_found) as units_found,
coalesce(sum(op.quantity_found*op.branch_price),0)::numeric as sales,
case when sum(op.quantity_found)/sum(op.quantity)>1 then 1 else sum(op.quantity_found)/sum(op.quantity) end as foundrate
from country_cpg_products ccp
join orders_orderproduct op on op.product_id=ccp.product_id
join orders_order o on o.id=op.order_id
join catalog_storebranch sb on sb.id=o.shopper_store_branch_id
join catalog_store s on s.id=sb.store_id
join geo_city gc on gc.id=sb.city_id
where 1=1
and o.status='DELIVERED'
and o.order_kind='NORMAL'
and op.updated >={{desde}}-interval '1 day'
and op.updated <{{hasta}}+interval '2 day'
and op.updated at time zone sb.timezone>= {{desde}}
and op.updated at time zone sb.timezone< {{hasta}}+interval '1 day'
group by 1,2,3,4,5,6,7,8,9
order by 5 desc
